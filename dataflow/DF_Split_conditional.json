{
	"name": "DF_Split_conditional",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "dfdepartment"
				}
			],
			"sinks": [
				{
					"name": "ItEmployeesSink"
				},
				{
					"name": "HREmployeesSink"
				},
				{
					"name": "PayRollEmployeesSink"
				}
			],
			"transformations": [
				{
					"name": "Spitbasedondepartment"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          Country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> dfdepartment",
				"dfdepartment split(equals(department, '1'),",
				"     equals(department, '2'),",
				"     equals(department, '3'),",
				"     disjoint: false) ~> Spitbasedondepartment@(ITEmployees, HREmployees, PayRollEmployees)",
				"Spitbasedondepartment@ITEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ITEmployees.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> ItEmployeesSink",
				"Spitbasedondepartment@HREmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['HREmployees.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> HREmployeesSink",
				"Spitbasedondepartment@PayRollEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['PayRollEmployees.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1),",
				"     preCommands: [],",
				"     postCommands: []) ~> PayRollEmployeesSink"
			]
		}
	}
}